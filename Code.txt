-docker ps -a "for seeing all  container "
-docker run image name  "it will  download if it's not available in local"
-docker stop {container name} "stop the container"
-docker run -it {name} "for expose the container"

---------
Dockerfile
FROM node :- "speifing  the image"

WORKDIR /app :- "workdirectry folder"

COPY . /app :- "First .(for all) from  where , second for specific place"

RUN npm install :- "installing  the packegs"

EXPOSE 80 :- "for  specific port(for  documation)"

CMD ["node", "server.js"] :- "for runing  the project"

--------- 
 
-Docker build . "for building the docker container"

docker run  {image name}"for runing  container"

docker run -p 3000:80 {image name} "for runing the container on speific port" 

docker --help "for get all the cmd"
docker -ps "for getting all ps realted command"
docker start {container name} "for restating the container"
docker run -p 3000:80 -d {image name}  "for run container detached" 
docker attach {container name} "for attached the container "
docker logs {container name} "seeing  past log"
docker start -a {container name} "for restarting and attached"
docker run -it {image name} "for interactive mode like Python"
docker start -a -i {container  name} "start container with  intreactive mode"
docker rm {container  name} "remove container history "
docker images "see all  the images "
docker rmi "delete image"
docker image prune "delete all images"
docker run  -p 3000:80 -d --rm {container name} " remove container when  it's  stop"
docker image inspect {image name}
docker cp {copy from ex: dummy/.(. for all copy)} {container name}:/ {to ex: /test} " for  copy data to container and get from  container 
docker run -p 3000:80 -d --rm --name(for  nameing the container) {name} {image name}
docker build -t(for tag) {name}:{tag}ex: test:1 .
docker tag {old image name}:tagname {new name}:tagname(optional) "for reanaming image
docker push {reponame} "for pushing image to  hub "
docker pull {reponame} "for pulling image to hub "
docker push  skanonymous/kub-first-app:{tag} 2 :- for pushing the image on docker hub


Volume:-
VOLUME ["/app/feedback"] :- add this in dockerfile for store data image
docker volume ls :- for list all volumes 
-v name:path ex(feedback:/app/feedback) :- add in run time for  adding store volume

docker-compose up -d --build :- for creating docker image (note : add build if you want to build)
docker-compose down :- for close the container
docker volume --help :- for getting all command realted to  volume
docker volume create feedback-files :- for creating volume
docker volume rm  feedback-files :- for deleting the volume
docker volume prune :- for remove all the unused volume
//networking 
docker container inspect mongodb: - for inspecting the container
docker run -d --name mongodb --network favorites-net mongo :- for connecting to network
docker network create favorites-net :- for creating the network
docker network ls :- for all seeing all the network
note:- for consume the network container has to be in  same network
docker images :- for the seeing all the images
docker run --name mongodb -v data:/data/db --rm -d --network goals-net mongo :- for adding volume  for mongodb
docker run --name  mongodb -v data:/data/db --rm -d --network goals-net -e MONGO_INITDB_ROOT_USERNAME=test -e MONGO_INITDB_ROOT_PASSWORD=TEST mongo :- for adding authentication  in mongo environment
docker run -it -v {project path}:/app node-utill{image name} npm init{any command who use node}:- for use utility
docker run -it -v G:/saurabh/DOCKER/Project/Docker-Kub/docker/Utility:/app mynpm  install 
docker-compose run npm init :- use for consume utility container
